
//import GUI.*;
//import contactlist.ContactList;
//import contactlist.connector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nadat
 */
public class ContactListGUI extends javax.swing.JFrame {
    
    String selectedContactId = null;
    static int selectedRow = -1;
    /**
     * Creates new form MainGUI
     */
    public ContactListGUI() {
        initComponents();
        displayContacts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewContactBtn = new javax.swing.JButton();
        deleteContactBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addNewContactBtn1 = new javax.swing.JButton();
        editContactBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        searchTf = new javax.swing.JTextField();
        refreshBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CONTACTLIST");
        setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N

        viewContactBtn.setText("View Contact Details");
        viewContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewContactBtnActionPerformed(evt);
            }
        });

        deleteContactBtn.setText("Delete Contact");
        deleteContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContactBtnActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Contact_Id", "First Name", "Middle Name", "Last Name", "Phone Type", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                tableComponentResized(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        addNewContactBtn1.setText("Add New Contact");
        addNewContactBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewContactBtn1ActionPerformed(evt);
            }
        });

        editContactBtn.setText("Edit Contact");
        editContactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editContactBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(deleteContactBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editContactBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addNewContactBtn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewContactBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchTf, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(refreshBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(addNewContactBtn1)
                        .addGap(18, 18, 18)
                        .addComponent(viewContactBtn)
                        .addGap(18, 18, 18)
                        .addComponent(editContactBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteContactBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(refreshBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewContactBtnActionPerformed
        // TODO add your handling code here:
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a contact");
        }
        else{
            ViewContactDetailsGUI viewContact = new ViewContactDetailsGUI(Integer.parseInt(selectedContactId));
            viewContact.setVisible(true);
            viewContact.pack();
            viewContact.setLocationRelativeTo(null);
            viewContact.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        
    }//GEN-LAST:event_viewContactBtnActionPerformed

    private void tableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tableComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_tableComponentResized

    private void addNewContactBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewContactBtn1ActionPerformed
        // TODO add your handling code here:
        AddNewContactGUI addContact = new AddNewContactGUI();
        addContact.setVisible(true);
        addContact.pack();
        addContact.setLocationRelativeTo(null);
        addContact.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }//GEN-LAST:event_addNewContactBtn1ActionPerformed
    
    private void editContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editContactBtnActionPerformed
        // TODO add your handling code here:
        
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a contact");
        }
        else{
            EditContactGUI editContact = new EditContactGUI(Integer.parseInt(selectedContactId));
            editContact.setVisible(true);
            editContact.pack();
            editContact.setLocationRelativeTo(null);
            editContact.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            
        }
        
    }//GEN-LAST:event_editContactBtnActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        selectedRow = table.getSelectedRow();
        selectedContactId = table.getModel().getValueAt(selectedRow, 0).toString();
    }//GEN-LAST:event_tableMouseClicked

    private void deleteContactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContactBtnActionPerformed
        // TODO add your handling code here:
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a contact");
        }
        else{
            DefaultTableModel tm = (DefaultTableModel)table.getModel();
            ContactList list = new ContactList();
            list.deleteContact(Integer.parseInt(selectedContactId));
            selectedRow=-1;
            displayContacts();
            //tm.removeRow(selectedRow);
            
        } 
    }//GEN-LAST:event_deleteContactBtnActionPerformed
    
    
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
       ContactList contact = new ContactList();
       HashMap searchList = contact.search(searchTf.getText());
        displayContacts(searchList);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        searchTf.setText("");
        displayContacts();
    }//GEN-LAST:event_refreshBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactListGUI().setVisible(true);
            }
        });
    }

    public static void displayContacts() {                                         
        // TODO add your handling code here:
            
        try
        {
            
            
            Connection con = connector.get();
            
            //fetching from CONTACT table
            String sqlContact = "select * from contact";
            PreparedStatement psContact = con.prepareStatement(sqlContact);
            ResultSet rsContact = psContact.executeQuery();
            
            DefaultTableModel tm = (DefaultTableModel)table.getModel();
            tm.setRowCount(0);
            while(rsContact.next())
            {   
                Object[] row = new Object[6];
                row[0] = rsContact.getInt("contact_id");
                row[1] = rsContact.getString("Fname");
                row[2] = rsContact.getString("Mname");
                row[3] = rsContact.getString("Lname");
                
                
                String sqlPhone = "select * from phone where contact_id = '"+rsContact.getInt("contact_id")+"'";
                PreparedStatement psPhone = con.prepareStatement(sqlPhone);
                ResultSet rsPhone = psPhone.executeQuery();
                
                String Phone[][] = new String[20][3];
                int i = 0;
                while(rsPhone.next())
                {
                    Phone[i][0] = rsPhone.getString("Phone_type");
                    Phone[i][1] = rsPhone.getString("Area_code");
                    Phone[i][2] = rsPhone.getString("Number");
                    i++;
                }
                
                int phoneFill =0;
                for(int j=0;j<Phone.length;j++){
                    if(Phone[j][0]!=null){
                        phoneFill++; 
                    }
                }
                    
                for(int j=0;j<phoneFill;j++)
                {   
                    if(Phone[j][0].contains("work")||Phone[j][0].contains("Work")||Phone[j][0].contains("WORK"))
                    {
                        row[4] = Phone[j][0];
                        row[5] = Phone[j][1]+" "+Phone[j][2];
                        break;
                    }
                }
                
                if(row[4] == null && row[5] == null){
                    for(int j=0;j<phoneFill;j++)
                    {   
                        if(Phone[j][0].contains("home")||Phone[j][0].contains("Home")||Phone[j][0].contains("HOME"))
                        {
                            row[4] = Phone[j][0];
                            row[5] = Phone[j][1]+" "+Phone[j][2];
                            break;
                        }
                    }
                }    
                
                if(row[4] == null && row[5] == null)
                {
                    row[4] = Phone[0][0];
                    row[5] = Phone[0][1]+" "+Phone[0][2];
                    
                 }    
                
               tm.addRow(row);
                
            }   
                
            
        }
        catch(Exception e)
        {
           e.printStackTrace();
        }
    }
    
    public static void displayContacts(HashMap searchList) {                                         
        // TODO add your handling code here:
            
        try
        {
            Connection con = connector.get();
            DefaultTableModel tm = (DefaultTableModel)table.getModel();
            tm.setRowCount(0);
                
            for (Object k : searchList.keySet()) {
                
                int contactId = Integer.parseInt(String.valueOf(k));
                
                String sqlContact = "select * from contact where Contact_id = '"+contactId+"'";
                PreparedStatement psContact = con.prepareStatement(sqlContact);
                ResultSet rsContact = psContact.executeQuery();

                while(rsContact.next())
                {   
                    Object[] row = new Object[6];
                    row[0] = rsContact.getInt("contact_id");
                    row[1] = rsContact.getString("Fname");
                    row[2] = rsContact.getString("Mname");
                    row[3] = rsContact.getString("Lname");


                    String sqlPhone = "select * from phone where contact_id = '"+rsContact.getInt("contact_id")+"'";
                    PreparedStatement psPhone = con.prepareStatement(sqlPhone);
                    ResultSet rsPhone = psPhone.executeQuery();

                    String Phone[][] = new String[20][3];
                    int i = 0;
                    while(rsPhone.next())
                    {
                        Phone[i][0] = rsPhone.getString("Phone_type");
                        Phone[i][1] = rsPhone.getString("Area_code");
                        Phone[i][2] = rsPhone.getString("Number");
                        i++;
                    }

                    int phoneFill =0;
                    for(int j=0;j<Phone.length;j++){
                        if(Phone[j][0]!=null){
                            phoneFill++; 
                        }
                    }

                    for(int j=0;j<phoneFill;j++)
                    {   
                        if(Phone[j][0].contains("work")||Phone[j][0].contains("Work")||Phone[j][0].contains("WORK"))
                        {
                            row[4] = Phone[j][0];
                            row[5] = Phone[j][1]+" "+Phone[j][2];
                            break;
                        }
                    }

                    if(row[4] == null && row[5] == null){
                        for(int j=0;j<phoneFill;j++)
                        {   
                            if(Phone[j][0].contains("home")||Phone[j][0].contains("Home")||Phone[j][0].contains("HOME"))
                            {
                                row[4] = Phone[j][0];
                                row[5] = Phone[j][1]+" "+Phone[j][2];
                                break;
                            }
                        }
                    }    

                    if(row[4] == null && row[5] == null)
                    {
                        row[4] = Phone[0][0];
                        row[5] = Phone[0][1]+" "+Phone[0][2];

                     }    

                   tm.addRow(row);

                }
                
            }            
        }
        catch(Exception e)
        {
           e.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewContactBtn1;
    private javax.swing.JButton deleteContactBtn;
    private javax.swing.JButton editContactBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTf;
    private static javax.swing.JTable table;
    private javax.swing.JButton viewContactBtn;
    // End of variables declaration//GEN-END:variables

    
}
